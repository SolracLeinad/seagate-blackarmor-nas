diff -Nurd --no-dereference u-boot-2017.11.orig/arch/arm/mach-kirkwood/Kconfig u-boot-2017.11/arch/arm/mach-kirkwood/Kconfig
--- u-boot-2017.11.orig/arch/arm/mach-kirkwood/Kconfig	2017-11-14 02:08:06.000000000 +0100
+++ u-boot-2017.11/arch/arm/mach-kirkwood/Kconfig	2021-05-10 21:26:24.116980873 +0200
@@ -56,6 +56,9 @@
 config TARGET_NAS220
 	bool "BlackArmor NAS220"
 
+config TARGET_NAS440
+	bool "BlackArmor NAS440"
+
 config TARGET_NSA310S
 	bool "Zyxel NSA310S"
 
@@ -80,6 +83,7 @@
 source "board/Seagate/dockstar/Kconfig"
 source "board/Seagate/goflexhome/Kconfig"
 source "board/Seagate/nas220/Kconfig"
+source "board/Seagate/nas440/Kconfig"
 source "board/zyxel/nsa310s/Kconfig"
 
 endif
diff -Nurd --no-dereference u-boot-2017.11.orig/board/Seagate/nas440/Kconfig u-boot-2017.11/board/Seagate/nas440/Kconfig
--- u-boot-2017.11.orig/board/Seagate/nas440/Kconfig	1970-01-01 01:00:00.000000000 +0100
+++ u-boot-2017.11/board/Seagate/nas440/Kconfig	2021-05-10 21:27:15.902164659 +0200
@@ -0,0 +1,12 @@
+if TARGET_NAS440
+
+config SYS_BOARD
+	default "nas440"
+
+config SYS_VENDOR
+	default "Seagate"
+
+config SYS_CONFIG_NAME
+	default "nas440"
+
+endif
diff -Nurd --no-dereference u-boot-2017.11.orig/board/Seagate/nas440/kwbimage.cfg u-boot-2017.11/board/Seagate/nas440/kwbimage.cfg
--- u-boot-2017.11.orig/board/Seagate/nas440/kwbimage.cfg	1970-01-01 01:00:00.000000000 +0100
+++ u-boot-2017.11/board/Seagate/nas440/kwbimage.cfg	2021-11-03 20:24:57.177800562 +0100
@@ -0,0 +1,154 @@
+#
+# Copyright (C) 2014  Evgeni Dobrev <evgeni@studio-punkt.com>
+# Copyright (C) 2021  Hajo Noerenberg <https://github.com/hn/>
+#
+# Based on sheevaplug/kwbimage.cfg originally written by
+# Prafulla Wadaskar <prafulla@marvell.com>
+# (C) Copyright 2009
+# Marvell Semiconductor <www.marvell.com>
+#
+# SPDX-License-Identifier:      GPL-2.0+
+#
+# Refer doc/README.kwbimage for more details about how-to configure
+# and create kirkwood boot image
+#
+
+# Boot Media configurations
+BOOT_FROM	nand
+NAND_ECC_MODE	default
+NAND_PAGE_SIZE	0x0200
+
+# SOC registers configuration using bootrom header extension
+# Maximum KWBIMAGE_MAX_CONFIG configurations allowed
+
+# Configure RGMII-0 interface pad voltage to 1.8V
+DATA 0xFFD100E0 0x1B1B1B9B
+
+DATA 0xFFD20134 0xBBBBBBBB
+DATA 0xFFD20138 0x00BBBBBB
+
+#Dram initalization for SINGLE x16 CL=5 @ 400MHz
+DATA 0xFFD01400 0x43000C30	# DDR Configuration register
+# bit13-0:  0xa00 (2560 DDR2 clks refresh rate)
+# bit23-14: zero
+# bit24: 1= enable exit self refresh mode on DDR access
+# bit25: 1 required
+# bit29-26: zero
+# bit31-30: 01
+
+DATA 0xFFD01404 0x39543000	# DDR Controller Control Low
+# bit 4:    0=addr/cmd in smame cycle
+# bit 5:    0=clk is driven during self refresh, we don't care for APX
+# bit 6:    0=use recommended falling edge of clk for addr/cmd
+# bit14:    0=input buffer always powered up
+# bit18:    1=cpu lock transaction enabled
+# bit23-20: 5=recommended value for CL=5 and STARTBURST_DEL disabled bit31=0
+# bit27-24: 8= CL+3, STARTBURST sample stages, for freqs 400MHz, unbuffered DIMM
+# bit30-28: 3 required
+# bit31:    0=no additional STARTBURST delay
+
+DATA 0xFFD01408 0x22125451	# DDR Timing (Low) (active cycles value +1)
+# bit7-4:   TRCD
+# bit11- 8: TRP
+# bit15-12: TWR
+# bit19-16: TWTR
+# bit20:    TRAS msb
+# bit23-21: 0x0
+# bit27-24: TRRD
+# bit31-28: TRTP
+
+DATA 0xFFD0140C 0x00000833	#  DDR Timing (High)
+# bit6-0:   TRFC
+# bit8-7:   TR2R
+# bit10-9:  TR2W
+# bit12-11: TW2W
+# bit31-13: zero required
+
+DATA 0xFFD01410 0x0000000C	#  DDR Address Control
+# bit1-0:   00, Cs0width=x8
+# bit3-2:   11, Cs0size=1Gb
+# bit5-4:   00, Cs1width=nonexistent
+# bit7-6:   00, Cs1size =nonexistent
+# bit9-8:   00, Cs2width=nonexistent
+# bit11-10: 00, Cs2size =nonexistent
+# bit13-12: 00, Cs3width=nonexistent
+# bit15-14: 00, Cs3size =nonexistent
+# bit16:    0,  Cs0AddrSel
+# bit17:    0,  Cs1AddrSel
+# bit18:    0,  Cs2AddrSel
+# bit19:    0,  Cs3AddrSel
+# bit31-20: 0 required
+
+DATA 0xFFD01414 0x00000000	#  DDR Open Pages Control
+# bit0:    0,  OpenPage enabled
+# bit31-1: 0 required
+
+DATA 0xFFD01418 0x00000000	#  DDR Operation
+# bit3-0:   0x0, DDR cmd
+# bit31-4:  0 required
+
+DATA 0xFFD0141C 0x00000C52	#  DDR Mode
+# bit2-0:   2, BurstLen=2 required
+# bit3:     0, BurstType=0 required
+# bit6-4:   4, CL=5
+# bit7:     0, TestMode=0 normal
+# bit8:     0, DLL reset=0 normal
+# bit11-9:  6, auto-precharge write recovery ????????????
+# bit12:    0, PD must be zero
+# bit31-13: 0 required
+
+DATA 0xFFD01420 0x00000042	#  DDR Extended Mode
+# bit0:    0,  DDR DLL enabled
+# bit1:    0,  DDR drive strenght normal
+# bit2:    0,  DDR ODT control lsd (disabled)
+# bit5-3:  000, required
+# bit6:    1,  DDR ODT control msb, (disabled)
+# bit9-7:  000, required
+# bit10:   0,  differential DQS enabled
+# bit11:   0, required
+# bit12:   0, DDR output buffer enabled
+# bit31-13: 0 required
+
+DATA 0xFFD01424 0x0000F1FF	#  DDR Controller Control High
+# bit2-0:  111, required
+# bit3  :  1  , MBUS Burst Chop disabled
+# bit6-4:  111, required
+# bit7  :  0
+# bit8  :  0
+# bit9  :  0  , no half clock cycle addition to dataout
+# bit10 :  0  , 1/4 clock cycle skew enabled for addr/ctl signals
+# bit11 :  0  , 1/4 clock cycle skew disabled for write mesh
+# bit15-12: 1111 required
+# bit31-16: 0    required
+
+DATA 0xFFD01428 0x00085520
+DATA 0xFFD0147C 0x00008552
+
+DATA 0xFFD01504 0x0FFFFFF1	# CS[0]n Size
+# bit0:    1,  Window enabled
+# bit1:    0,  Write Protect disabled
+# bit3-2:  00, CS0 hit selected
+# bit23-4: ones, required
+# bit31-24: 0x07, Size (i.e. 128MB)
+
+DATA 0xFFD01508 0x00000000      # CS[1]n Base address to 0x0
+
+DATA 0xFFD0150C 0x00000000	# CS[1]n Size, window disabled
+
+DATA 0xFFD01514 0x00000000	# CS[2]n Size, window disabled
+DATA 0xFFD0151C 0x00000000	# CS[3]n Size, window disabled
+
+DATA 0xFFD01494 0x003C0000	#  DDR ODT Control (Low)
+DATA 0xFFD01498 0x00000000	#  DDR ODT Control (High)
+# bit1-0:  00, ODT0 controlled by ODT Control (low) register above
+# bit3-2:  01, ODT1 active NEVER!
+# bit31-4: zero, required
+
+DATA 0xFFD0149C 0x0000F80F	# CPU ODT Control
+
+DATA 0xFFD01480 0x00000001	# DDR Initialization Control
+#bit0=1, enable DDR init upon this register write
+
+# End of Header extension
+DATA 0x0 0x0
+
diff -Nurd --no-dereference u-boot-2017.11.orig/board/Seagate/nas440/MAINTAINERS u-boot-2017.11/board/Seagate/nas440/MAINTAINERS
--- u-boot-2017.11.orig/board/Seagate/nas440/MAINTAINERS	1970-01-01 01:00:00.000000000 +0100
+++ u-boot-2017.11/board/Seagate/nas440/MAINTAINERS	2021-05-10 21:27:31.322517143 +0200
@@ -0,0 +1,6 @@
+NAS440 BOARD
+M:	Evgeni Dobrev <evgeni@studio-punkt.com>
+S:	Maintained
+F:	board/Seagate/nas440/
+F:	include/configs/nas440.h
+F:	configs/nas440_defconfig
diff -Nurd --no-dereference u-boot-2017.11.orig/board/Seagate/nas440/Makefile u-boot-2017.11/board/Seagate/nas440/Makefile
--- u-boot-2017.11.orig/board/Seagate/nas440/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ u-boot-2017.11/board/Seagate/nas440/Makefile	2021-05-10 21:28:08.675370935 +0200
@@ -0,0 +1,7 @@
+#
+# Copyright (C) 2014  Evgeni Dobrev <evgeni@studio-punkt.com>
+#
+# SPDX-License-Identifier:      GPL-2.0+
+#
+
+obj-y	:= nas440.o
diff -Nurd --no-dereference u-boot-2017.11.orig/board/Seagate/nas440/nas440.c u-boot-2017.11/board/Seagate/nas440/nas440.c
--- u-boot-2017.11.orig/board/Seagate/nas440/nas440.c	1970-01-01 01:00:00.000000000 +0100
+++ u-boot-2017.11/board/Seagate/nas440/nas440.c	2021-11-03 20:28:21.274663770 +0100
@@ -0,0 +1,319 @@
+/*
+ * Copyright (C) 2014  Evgeni Dobrev <evgeni@studio-punkt.com>
+ * Copyright (C) 2021  Hajo Noerenberg <https://github.com/hn/>
+ *
+ * Based on sheevaplug.c originally written by
+ * Prafulla Wadaskar <prafulla@marvell.com>
+ * (C) Copyright 2009
+ * Marvell Semiconductor <www.marvell.com>
+ *
+ * SPDX-License-Identifier:     GPL-2.0+
+ */
+
+#include <common.h>
+#include <miiphy.h>
+#include <asm/mach-types.h>
+#include <asm/arch/soc.h>
+#include <asm/arch/mpp.h>
+#include <asm/arch/cpu.h>
+#include <asm/io.h>
+#include <asm/arch/gpio.h>
+#include <version.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+int board_early_init_f(void)
+{
+	/*
+	 * default gpio configuration
+	 */
+	mvebu_config_gpio(NAS440_GE_OE_VAL_LOW, NAS440_GE_OE_VAL_HIGH,
+			  NAS440_GE_OE_LOW, NAS440_GE_OE_HIGH);
+
+	/* Multi-Purpose Pins Functionality configuration */
+	static const u32 kwmpp_config[] = {
+		MPP0_NF_IO2,
+		MPP1_NF_IO3,
+		MPP2_NF_IO4,
+		MPP3_NF_IO5,
+		MPP4_NF_IO6,
+		MPP5_NF_IO7,
+		MPP6_SYSRST_OUTn,
+		MPP7_GPO,		/* GPIO_LCD_HD44780_BACKLIGHT */
+		MPP8_TW_SDA,
+		MPP9_TW_SCK,
+		MPP10_UART0_TXD,
+		MPP11_UART0_RXD,
+		MPP12_GPO,		/* GPIO_LED_74AHC164_DATA */
+		MPP13_GPIO,		/* GPIO_LED_74AHC164_CLK */
+		MPP14_SATA1_PRESENTn,
+		MPP15_SATA0_ACTn,
+		MPP16_SATA1_ACTn,
+		MPP17_SATA0_PRESENTn,
+		MPP18_NF_IO0,
+		MPP19_NF_IO1,
+		MPP20_GE1_0,		/* GbE Port1, RGMII mode (12 pins GE1_0-7, GE1_10-13) */
+		MPP21_GE1_1,
+		MPP22_GE1_2,
+		MPP23_GE1_3,
+		MPP24_GE1_4,
+		MPP25_GE1_5,
+		MPP26_GE1_6,
+		MPP27_GE1_7,
+		MPP28_GPIO,		/* GPIO_SATA_POWER */
+		MPP29_GPIO,		/* GPIO_BUTTON_RESET */
+		MPP30_GE1_10,
+		MPP31_GE1_11,
+		MPP32_GE1_12,
+		MPP33_GE1_13,
+		MPP34_GPIO,		/* GPIO_BUTTON_LCD_LOWER */
+		MPP35_GPIO,		/* GPIO_LCD_HD44780_RS */
+		MPP36_GPIO,		/* GPIO_LCD_HD44780_D0 */
+		MPP37_GPIO,		/* GPIO_LCD_HD44780_D1 */
+		MPP38_GPIO,		/* GPIO_LCD_HD44780_D2 */
+		MPP39_GPIO,		/* GPIO_LCD_HD44780_D3 */
+		MPP40_GPIO,		/* GPIO_LCD_HD44780_D4 */
+		MPP41_GPIO,		/* GPIO_LCD_HD44780_D5 */
+		MPP42_GPIO,		/* GPIO_LCD_HD44780_D6 */
+		MPP43_GPIO,		/* GPIO_LCD_HD44780_D7 */
+		MPP44_GPIO,		/* GPIO_LCD_HD44780_RW */
+		MPP45_GPIO,		/* GPIO_LCD_HD44780_E  */
+		MPP46_GPIO,
+		MPP47_GPIO,		/* GPIO_BUTTON_LCD_UPPER */
+		MPP48_GPIO,		/* GPIO_BOARD_POWER */
+		MPP49_GPIO,		/* GPIO_BUTTON_POWER */
+		0
+	};
+	kirkwood_mpp_conf(kwmpp_config, NULL);
+	return 0;
+}
+
+/* HD44780 pins, data bits first, backlight last */
+static int hd44780_pins[12] = {
+	GPIO_LCD_HD44780_D0,
+	GPIO_LCD_HD44780_D1,
+	GPIO_LCD_HD44780_D2,
+	GPIO_LCD_HD44780_D3,
+	GPIO_LCD_HD44780_D4,
+	GPIO_LCD_HD44780_D5,
+	GPIO_LCD_HD44780_D6,
+	GPIO_LCD_HD44780_D7,
+	GPIO_LCD_HD44780_E,
+	GPIO_LCD_HD44780_RW,
+	GPIO_LCD_HD44780_RS,
+	GPIO_LCD_HD44780_BACKLIGHT
+};
+
+#define HD44780_NUM_COL			16
+#define HD44780_BUF_COL			40
+#define HD44780_NUM_ROW			2
+
+#define HD44780_PIN_NUM			(sizeof(hd44780_pins)/sizeof(int))
+
+/* HD44780 LCD display commands - adapted from hd44780.h by Joerg Wunsch <joerg@FreeBSD.ORG> */
+#define HD44780_CMD_CLR \
+	0x01
+#define HD44780_CMD_HOME \
+	0x02
+#define HD44780_CMD_ENTMODE(inc, shift) \
+	(0x04 | ((inc)? 0x02: 0) | ((shift)? 1: 0))
+#define HD44780_CMD_DISPCTL(disp, cursor, blink) \
+	(0x08 | ((disp)? 0x04: 0) | ((cursor)? 0x02: 0) | ((blink)? 1: 0))
+#define HD44780_CMD_SHIFT(shift, right) \
+	(0x10 | ((shift)? 0x08: 0) | ((right)? 0x04: 0))
+#define HD44780_CMD_FNSET(if8bit, twoline, font5x10) \
+	(0x20 | ((if8bit)? 0x10: 0) | ((twoline)? 0x08: 0) | \
+		((font5x10)? 0x04: 0))
+#define HD44780_CMD_CGADDR(addr) \
+	(0x40 | ((addr) & 0x3f))
+#define HD44780_CMD_DDADDR(addr) \
+	(0x80 | ((addr) & 0x7f))
+
+static void lcd_send(unsigned int val, int mode)
+{
+	udelay(1);
+        kw_gpio_set_value(GPIO_LCD_HD44780_RS, mode);
+	udelay(1);
+
+        kw_gpio_set_value(GPIO_LCD_HD44780_E, 0);
+	for (int i=0; i<8; i++) {
+	        kw_gpio_set_value(hd44780_pins[i], (val&(1<<i))>>i );
+        }
+	udelay(1);
+        kw_gpio_set_value(GPIO_LCD_HD44780_E, 1);
+	udelay(1);
+        kw_gpio_set_value(GPIO_LCD_HD44780_E, 0);
+	udelay(50);
+}
+
+void lcd_init(void)
+{
+	for (int i=0; i<HD44780_PIN_NUM; i++) {
+		kw_gpio_set_valid(hd44780_pins[i], GPIO_OUTPUT_OK);
+		kw_gpio_direction_output(hd44780_pins[i], i == (HD44780_PIN_NUM-1));
+	}
+
+	lcd_send(HD44780_CMD_FNSET(1, 1, 0), 0);
+	udelay(50);
+	lcd_send(HD44780_CMD_FNSET(1, 1, 0), 0);
+	udelay(50);
+	lcd_send(HD44780_CMD_FNSET(1, 1, 0), 0);
+	udelay(50);
+	lcd_send(HD44780_CMD_DISPCTL(1, 0, 0), 0);
+	udelay(50);
+	lcd_send(HD44780_CMD_CLR, 0);
+	udelay(50);
+	lcd_send(HD44780_CMD_ENTMODE(1, 0), 0);
+
+	udelay(2000);
+}
+
+void lcd_row(int row, char *buf)
+{
+	int p = 0;
+
+	if (row >= HD44780_NUM_ROW) {
+		return;
+	}
+
+	lcd_send(HD44780_CMD_DDADDR(HD44780_BUF_COL * row + 0), 0);
+	for (int i=0; i<HD44780_NUM_COL; i++) {
+		if (buf[i] == 0) {
+			p++;
+		}
+		lcd_send(p ? 32 : buf[i], 1);
+	}
+}
+
+enum led_disk {
+	LED_DSK_OFF,
+	LED_DSK_RED
+	/* LED_DSK_GREEN disk activity led is controlled directly by the hardware */
+};
+
+enum led_system {
+	LED_SYS_OFF,
+	LED_SYS_BLUE,
+	LED_SYS_RED
+};
+
+void led_init(void)
+{
+	kw_gpio_set_valid(GPIO_LED_74AHC164_DATA, GPIO_OUTPUT_OK);
+	kw_gpio_direction_output(GPIO_LED_74AHC164_DATA, 0);
+	kw_gpio_set_valid(GPIO_LED_74AHC164_CLK, GPIO_OUTPUT_OK);
+	kw_gpio_direction_output(GPIO_LED_74AHC164_CLK, 0);
+}
+
+void led_set(enum led_disk disk1, enum led_disk disk2, enum led_disk disk3,
+	enum led_disk disk4, enum led_system front1 )
+{
+	int ledbits = (0x81 | ((front1==LED_SYS_RED)? 0x08 : 0) | ((front1==LED_SYS_BLUE)? 0x04 : 0) \
+		| ((disk1==LED_DSK_RED)? 0 : 0x02) | ((disk2==LED_DSK_RED)? 0 : 0x40) \
+		| ((disk3==LED_DSK_RED)? 0 : 0x20) | ((disk4==LED_DSK_RED)? 0 : 0x10));
+
+	for (int i=0; i<8; i++) {
+		kw_gpio_set_value(GPIO_LED_74AHC164_DATA, (ledbits >> i) & 1);
+		udelay(1);
+		kw_gpio_set_value(GPIO_LED_74AHC164_CLK, 1);
+		kw_gpio_set_value(GPIO_LED_74AHC164_CLK, 0);
+	}
+}
+
+void check_resetbutton(void)
+{
+	kw_gpio_set_valid(GPIO_BUTTON_RESET, GPIO_INPUT_OK);
+	kw_gpio_direction_input(GPIO_BUTTON_RESET);
+	if (kw_gpio_get_value(GPIO_BUTTON_RESET) == 0) {
+		env_set("buttonreset", "1");
+	}
+}
+
+int board_init(void)
+{
+	/*
+	 * arch number of board
+	 */
+	gd->bd->bi_arch_number = MACH_TYPE_RD88F6281;
+
+	/* adress of boot parameters */
+	gd->bd->bi_boot_params = mvebu_sdram_bar(0) + 0x100;
+
+	check_resetbutton();
+
+	led_init();
+	led_set(LED_DSK_OFF, LED_DSK_OFF, LED_DSK_OFF, LED_DSK_OFF, LED_SYS_BLUE);
+
+	lcd_init();
+	lcd_row(0, U_BOOT_VERSION "");
+
+	return 0;
+}
+
+#ifdef CONFIG_RESET_PHY_R
+/* Configure and enable MV88E1116 PHY */
+void mv_phy_88e1116_init(char *name)
+{
+	u16 reg;
+	u16 devadr;
+
+	if (miiphy_set_current_dev(name))
+		return;
+
+	/* command to read PHY dev address */
+	if (miiphy_read(name, 0xEE, 0xEE, (u16 *)&devadr)) {
+		printf("Err..%s could not read PHY dev address\n", __func__);
+		return;
+	}
+
+	/*
+	 * Enable RGMII delay on Tx and Rx for CPU port
+	 * Ref: sec 4.7.2 of chip datasheet
+	 */
+	miiphy_write(name, devadr, MV88E1116_PGADR_REG, 2);
+	miiphy_read(name, devadr, MV88E1116_MAC_CTRL_REG, &reg);
+	reg |= (MV88E1116_RGMII_RXTM_CTRL | MV88E1116_RGMII_TXTM_CTRL);
+	miiphy_write(name, devadr, MV88E1116_MAC_CTRL_REG, reg);
+	miiphy_write(name, devadr, MV88E1116_PGADR_REG, 0);
+
+	/* reset the phy */
+	miiphy_reset(name, devadr);
+
+	printf("88E1116 Initialized on %s\n", name);
+}
+
+void reset_phy(void)
+{
+	/* configure and initialize both PHY's */
+	mv_phy_88e1116_init("egiga0");
+	mv_phy_88e1116_init("egiga1");
+}
+#endif /* CONFIG_RESET_PHY_R */
+
+#ifdef CONFIG_SHOW_BOOT_PROGRESS
+void show_boot_progress(int val)
+{
+	switch (val) {
+/*                          0123456789abcdef */
+	case BOOTSTAGE_ID_BOARD_INIT_DONE:
+		lcd_row(1, "Board init done");
+		break;
+	case BOOTSTAGE_ID_USB_START:
+		lcd_row(1, "Init USB");
+		break;
+	case BOOTSTAGE_ID_ETH_START:
+		lcd_row(1, "Init ethernet");
+		break;
+	case BOOTSTAGE_ID_MAIN_LOOP:
+		lcd_row(1, "Wait for input");
+		break;
+	case BOOTSTAGE_ID_RUN_OS:
+		lcd_row(1, "Starting Linux");
+		break;
+	default:
+		if (val < 0)	/* error */
+			lcd_row(1, "Error");
+		break;
+	}
+}
+#endif
diff -Nurd --no-dereference u-boot-2017.11.orig/configs/nas440_defconfig u-boot-2017.11/configs/nas440_defconfig
--- u-boot-2017.11.orig/configs/nas440_defconfig	1970-01-01 01:00:00.000000000 +0100
+++ u-boot-2017.11/configs/nas440_defconfig	2021-05-10 21:30:04.954028507 +0200
@@ -0,0 +1,32 @@
+CONFIG_ARM=y
+CONFIG_KIRKWOOD=y
+CONFIG_TARGET_NAS440=y
+CONFIG_IDENT_STRING="\nNAS 440"
+CONFIG_BOOTDELAY=3
+# CONFIG_DISPLAY_BOARDINFO is not set
+CONFIG_HUSH_PARSER=y
+CONFIG_SYS_PROMPT="nas440> "
+# CONFIG_CMD_FLASH is not set
+CONFIG_CMD_IDE=y
+CONFIG_CMD_NAND=y
+CONFIG_CMD_USB=y
+# CONFIG_CMD_SETEXPR is not set
+CONFIG_CMD_DHCP=y
+CONFIG_CMD_MII=y
+CONFIG_CMD_PING=y
+CONFIG_CMD_DATE=y
+CONFIG_CMD_EXT2=y
+CONFIG_CMD_EXT4=y
+CONFIG_CMD_FAT=y
+CONFIG_CMD_JFFS2=y
+CONFIG_CMD_UBI=y
+CONFIG_ISO_PARTITION=y
+CONFIG_EFI_PARTITION=y
+# CONFIG_PARTITION_UUIDS is not set
+CONFIG_ENV_IS_IN_NAND=y
+# CONFIG_MMC is not set
+CONFIG_SYS_NS16550=y
+CONFIG_USB=y
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_STORAGE=y
+CONFIG_OF_LIBFDT=y
diff -Nurd --no-dereference u-boot-2017.11.orig/include/configs/nas440.h u-boot-2017.11/include/configs/nas440.h
--- u-boot-2017.11.orig/include/configs/nas440.h	1970-01-01 01:00:00.000000000 +0100
+++ u-boot-2017.11/include/configs/nas440.h	2021-11-03 20:30:53.170073669 +0100
@@ -0,0 +1,195 @@
+/*
+ * Copyright (C) 2014 Evgeni Dobrev <evgeni@studio-punkt.com>
+ * Copyright (C) 2021 Hajo Noerenberg <https://github.com/hn/>
+ *
+ * based on work from:
+ * (C) Copyright 2009
+ * Marvell Semiconductor <www.marvell.com>
+ * Written-by: Prafulla Wadaskar <prafulla@marvell.com>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef _CONFIG_NAS440_H
+#define _CONFIG_NAS440_H
+
+/*
+ * Machine type ID
+ */
+#define CONFIG_MACH_TYPE		MACH_TYPE_RD88F6281
+
+/*
+ * High Level Configuration Options (easy to change)
+ */
+#define CONFIG_FEROCEON_88FR131		/* #define CPU Core subversion */
+#define CONFIG_KW88F6281		/* SOC Name */
+#define CONFIG_SKIP_LOWLEVEL_INIT	/* disable board lowlevel_init */
+#define CONFIG_KIRKWOOD_GPIO
+#define CONFIG_SHOW_BOOT_PROGRESS
+
+/*
+ * GPIO pin names, input/output direction and default values
+ *
+ * GPIO_BUTTON_LCD_LOWER, GPIO_BUTTON_LCD_UPPER
+ *  Buttons next to LC display, LOW if pressed
+ *
+ * GPIO_BUTTON_POWER
+ *  Power button at front of case, LOW if pressed
+ *
+ * GPIO_BUTTON_RESET
+ *  Reset button at back of case, LOW if pressed
+ *
+ * GPIO_LCD_HD44780_*
+ *  HD44780-compatible LC display, control via 8bit parallel data transfer
+ *
+ * GPIO_LED_74AHC164_*
+ *  Control front panel LEDs via 74AHC164 8bit shift register
+ *
+ * GPIO_SATA_POWER
+ *  Power for SoC SATA ports (NAS drives 3 and 4)
+ *
+ * GPIO_BOARD_POWER
+ *  Shutdown board if LOW
+ *
+ */
+
+#define GPIO_LCD_HD44780_BACKLIGHT	7
+#define GPIO_LED_74AHC164_DATA		12
+#define GPIO_LED_74AHC164_CLK		13
+#define GPIO_SATA_POWER			28
+#define GPIO_BUTTON_RESET		29
+#define GPIO_BUTTON_LCD_LOWER		34
+#define GPIO_LCD_HD44780_RS		35
+#define GPIO_LCD_HD44780_D0		36
+#define GPIO_LCD_HD44780_D1		37
+#define GPIO_LCD_HD44780_D2		38
+#define GPIO_LCD_HD44780_D3		39
+#define GPIO_LCD_HD44780_D4		40
+#define GPIO_LCD_HD44780_D5		41
+#define GPIO_LCD_HD44780_D6		42
+#define GPIO_LCD_HD44780_D7		43
+#define GPIO_LCD_HD44780_RW		44
+#define GPIO_LCD_HD44780_E		45
+#define GPIO_BUTTON_LCD_UPPER		47
+#define GPIO_BOARD_POWER		48
+#define GPIO_BUTTON_POWER		49
+
+#define _BIT(x) (1<<(x%32))
+
+/*
+ * GPIO output enable, pins 0-31 to LOW, pins 31-49 to HIGH config register
+ */
+#define NAS440_GE_OE_LOW	(~(_BIT(GPIO_LCD_HD44780_BACKLIGHT)	\
+				| _BIT(GPIO_LED_74AHC164_DATA)		\
+				| _BIT(GPIO_LED_74AHC164_CLK)		\
+				| _BIT(GPIO_SATA_POWER)))
+#define NAS440_GE_OE_HIGH	(~(_BIT(GPIO_BOARD_POWER)		\
+				| _BIT(GPIO_LCD_HD44780_RS)	\
+				| _BIT(GPIO_LCD_HD44780_D0)	\
+				| _BIT(GPIO_LCD_HD44780_D1)	\
+				| _BIT(GPIO_LCD_HD44780_D2)	\
+				| _BIT(GPIO_LCD_HD44780_D3)	\
+				| _BIT(GPIO_LCD_HD44780_D4)	\
+				| _BIT(GPIO_LCD_HD44780_D5)	\
+				| _BIT(GPIO_LCD_HD44780_D6)	\
+				| _BIT(GPIO_LCD_HD44780_D7)	\
+				| _BIT(GPIO_LCD_HD44780_RW)	\
+				| _BIT(GPIO_LCD_HD44780_E)))
+
+/*
+ * GPIO output default values
+ */
+#define NAS440_GE_OE_VAL_LOW	(_BIT(GPIO_LCD_HD44780_BACKLIGHT)	\
+				| _BIT(GPIO_SATA_POWER))
+#define NAS440_GE_OE_VAL_HIGH	_BIT(GPIO_BOARD_POWER)
+
+/* PHY related */
+#define MV88E1116_LED_FCTRL_REG		10
+#define MV88E1116_CPRSP_CR3_REG		21
+#define MV88E1116_MAC_CTRL_REG		21
+#define MV88E1116_PGADR_REG		22
+#define MV88E1116_RGMII_TXTM_CTRL	(1 << 4)
+#define MV88E1116_RGMII_RXTM_CTRL	(1 << 5)
+
+/*
+ * Commands configuration
+ */
+#define CONFIG_SYS_LONGHELP
+#define CONFIG_AUTO_COMPLETE
+#define CONFIG_CMDLINE_EDITING
+
+/*
+ * mv-common.h should be defined after CMD configs since it used them
+ * to enable certain macros
+ */
+#include "mv-common.h"
+
+/*
+ *  Environment variables configurations
+ */
+#ifdef CONFIG_CMD_NAND
+#define CONFIG_ENV_SECT_SIZE 0x10000
+#endif
+
+#define CONFIG_ENV_SIZE	0x10000
+#define CONFIG_ENV_OFFSET 0xa0000
+
+/*
+ * Default environment variables
+ */
+#define CONFIG_BOOTCOMMAND ""
+
+#define CONFIG_EXTRA_ENV_SETTINGS \
+	"bootargs=console=ttyS0,115200\0" \
+	"mtdparts=mtdparts=orion_nand:0xa0000@0x0(uboot),"\
+	"0x010000@0xa0000(env),"\
+	"0x500000@0xc0000(uimage),"\
+	"0x1a40000@0x5c0000(rootfs)\0" \
+	"mtdids=nand0=orion_nand\0"\
+	"bootdelay=-1\0"\
+	"autostart=no\0"\
+	"autoload=no\0"
+
+/*
+ * Ethernet Driver configuration
+ */
+#ifdef CONFIG_CMD_NET
+#define CONFIG_MVGBE_PORTS {1, 1}	/* enable both ports */
+#define CONFIG_PHY_BASE_ADR 8
+#endif /* CONFIG_CMD_NET */
+
+/*
+ * USB/EHCI
+ */
+#ifdef CONFIG_CMD_USB
+#define CONFIG_USB_EHCI_KIRKWOOD	/* on Kirkwood platform	*/
+#define CONFIG_EHCI_IS_TDI
+#define CONFIG_SUPPORT_VFAT
+#endif /* CONFIG_CMD_USB */
+
+/*
+ * File system
+ */
+#define CONFIG_JFFS2_NAND
+#define CONFIG_JFFS2_LZO
+#define CONFIG_MTD_DEVICE               /* needed for mtdparts commands */
+#define CONFIG_MTD_PARTITIONS
+
+/*
+ * SATA
+ */
+#ifdef CONFIG_MVSATA_IDE
+#define CONFIG_SYS_ATA_IDE0_OFFSET      MV_SATA_PORT0_OFFSET
+#define CONFIG_SYS_ATA_IDE1_OFFSET      MV_SATA_PORT1_OFFSET
+#endif
+
+/*
+ *  Date Time
+ */
+#ifdef CONFIG_CMD_DATE
+#define CONFIG_RTC_MV
+#endif /* CONFIG_CMD_DATE */
+
+
+#endif /* _CONFIG_NAS440_H */
+
